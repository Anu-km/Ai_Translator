import tkinter as tk
from tkinter import ttk, messagebox
from googletrans import Translator, LANGUAGES
from gtts import gTTS
import os
import pyttsx3
from playsound3 import playsound
import speech_recognition as sr

def update_language_list(*args):
    search_text = search_var.get().lower()
    filtered_languages = [lang for lang in lang_dict.keys() if search_text in lang.lower()]
    choose_language['values'] = filtered_languages
    if filtered_languages:
        choose_language.current(0)

def translate():
    input_text = text_entry1.get("1.0", "end-1c").strip()
    target_lang = choose_language.get()
    if not input_text:
        messagebox.showerror('Language Translator', 'Enter text to translate!')
        return
    try:
        target_code = lang_dict.get(target_lang, "en")
        output = translator.translate(input_text, dest=target_code)
        text_entry2.delete("1.0", "end")
        text_entry2.insert("end", output.text)
    except Exception as e:
        messagebox.showerror("Translation Error", f"Error: {e}")

def speak_translation():
    translated_text = text_entry2.get("1.0", "end-1c").strip()
    target_lang = lang_dict.get(choose_language.get(), "en")
    if not translated_text:
        messagebox.showwarning("Warning", "No translated text to speak!")
        return
    try:
        tts = gTTS(text=translated_text, lang=target_lang, slow=False)
        tts.save("output.mp3")
        playsound("output.mp3")
        os.remove("output.mp3")
    except:
        engine.say(translated_text)
        engine.runAndWait()

def voice_input():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        messagebox.showinfo("Voice Input", "Speak now...")
        try:
            audio = recognizer.listen(source)
            text = recognizer.recognize_google(audio)
            text_entry1.insert('end', text)
        except sr.UnknownValueError:
            messagebox.showerror("Error", "Could not understand the audio")
        except sr.RequestError:
            messagebox.showerror("Error", "Could not request results")

def clear():
    text_entry1.delete("1.0", "end")
    text_entry2.delete("1.0", "end")

root = tk.Tk()
root.title('AI Translator')
root.geometry('700x550')
root.configure(bg='#6FA3F7')

translator = Translator()
engine = pyttsx3.init()

lang_dict = {v.capitalize(): k for k, v in LANGUAGES.items()}

frame1 = tk.Frame(root, width=680, height=500, relief="solid", borderwidth=5, bg='#6FA3F7')
frame1.place(x=10, y=10)

search_var = tk.StringVar()
search_var.trace("w", update_language_list)
search_entry = tk.Entry(frame1, textvariable=search_var, font=('verdana', 11))
search_entry.place(relx=0.5, y=40, anchor="center")

choose_language = ttk.Combobox(frame1, width=30, state='readonly', font=('verdana', 11, 'bold'))
choose_language['values'] = list(lang_dict.keys())
choose_language.place(relx=0.5, y=70, anchor="center")

text_entry1 = tk.Text(frame1, width=39, height=9, borderwidth=3, relief="solid", font=('verdana', 9))
text_entry1.place(relx=0.25, rely=0.35, anchor="center")

text_entry2 = tk.Text(frame1, width=39, height=9, borderwidth=3, relief="solid", font=('verdana', 9))
text_entry2.place(relx=0.75, rely=0.35, anchor="center")

button_frame = tk.Frame(frame1, bg='#6FA3F7')
button_frame.place(relx=0.5, y=350, anchor="center")

tk.Button(button_frame, command=translate, text="Translate", font=('verdana', 11, 'bold')).grid(row=0, column=0, padx=10)
tk.Button(button_frame, command=speak_translation, text="ðŸ”Š Speak Output", font=('verdana', 11, 'bold')).grid(row=0, column=1, padx=10)
tk.Button(button_frame, command=voice_input, text="ðŸŽ¤ Voice Input", font=('verdana', 11, 'bold')).grid(row=0, column=2, padx=10)
tk.Button(button_frame, command=clear, text="Clear", font=('verdana', 11, 'bold')).grid(row=0, column=3, padx=10)

root.mainloop()
